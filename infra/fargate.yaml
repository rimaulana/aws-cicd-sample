---
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Launch Fargate service behind an application load balancer

Parameters:

  TaskSize:
    Type: Number
    Default: 2
    Description: >-
      Number of task you want to launch

  ApplicationPort:
    Type: Number
    Default: 8080
    Description: >-
      Port number that will be used by web application

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'
      - Key: CreatedBy
        Value: !Sub 'CloudFormation Stack ${AWS::StackName}'

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: 
        Fn::GetAtt: 
        - ElasticIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnetAZ1
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${AWS::StackName}-nat-on-'
            - Fn::Select:
              - 0
              - Fn::GetAZs: !Ref AWS::Region

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Routing Table
      - Key: Network
        Value: Public
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Routing Table
      - Key: Network
        Value: Private
    
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet AZ1
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true
      CidrBlock: 172.16.1.0/24
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${AWS::StackName}-public-on-'
            - Fn::Select:
              - 0
              - Fn::GetAZs: !Ref AWS::Region

  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet AZ2
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true
      CidrBlock: 172.16.2.0/24
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${AWS::StackName}-public-on-'
            - Fn::Select:
              - 1
              - Fn::GetAZs: !Ref AWS::Region

  PrivateSubnetAZ1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet AZ1
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 172.16.3.0/24
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${AWS::StackName}-private-on-'
            - Fn::Select:
              - 0
              - Fn::GetAZs: !Ref AWS::Region

  PrivateSubnetAZ2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet AZ2
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 172.16.4.0/24
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 
          Fn::Join:
          - ""
          - - !Sub '${AWS::StackName}-private-on-'
            - Fn::Select:
              - 1
              - Fn::GetAZs: !Ref AWS::Region

  PublicSubnetRouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ2
      RouteTableId: !Ref PublicRouteTable
      
  PrivateSubnetRouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZ1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZ2
      RouteTableId: !Ref PrivateRouteTable

  ExternaltoALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: >-
        Allow connection to port 80 from the internet to application load balancer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        Description: >-
          Allow application load balancer to initiate outbound connection
        FromPort: 0
        IpProtocol: tcp
        ToPort: 65535
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        Description: >-
          Allow external entity to connect to only port 80
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      Tags:
      - Key: Name
        Value: ExternaltoALBSecurityGroup
      - Key: Description
        Value: Allow connection to port 80 from the internet to application load balancer
      - Key: CreatedBy
        Value: !Sub 'CloudFormation Stack ${AWS::StackName}'
      
  ALBtoTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub 'Allow connection to port ${ApplicationPort} from application load balancer to task'
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        Description: >-
          Allow task to initiate outbound connection
        FromPort: 0
        IpProtocol: tcp
        ToPort: 65535
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref ExternaltoALBSecurityGroup
        Description: !Sub 'Allow only application load balancer to connect to port ${ApplicationPort}'
        FromPort: !Ref ApplicationPort 
        IpProtocol: tcp
        ToPort: !Ref ApplicationPort
      Tags:
      - Key: Name
        Value: ALBtoTaskSecurityGroup
      - Key: Description
        Value: !Sub 'Allow connection to port ${ApplicationPort} from application load balancer to task'

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      HealthCheckPort: !Ref ApplicationPort
      HealthCheckProtocol: HTTP
      Port: !Ref ApplicationPort
      Protocol: HTTP
      TargetType: ip
      Tags:
      - Key: Name
        Value: DefaultTargetGroup

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
      - !Ref ExternaltoALBSecurityGroup
      Subnets:
      - !Ref PublicSubnetAZ1
      - !Ref PublicSubnetAZ2
      Tags:
      - Key: CreatedBy
        Value: !Sub 'CloudFormation Stack ${AWS::StackName}'

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DefaultTargetGroup

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action: 
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: Essential
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 
            - 'ecr:GetAuthorizationToken'
            - 'ecr:BatchCheckLayerAvailability'
            - 'ecr:GetDownloadUrlForLayer'
            - 'ecr:BatchGetImage'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: web
        Cpu: 256
        Memory: 512
        Image: rimaulana/simple-express
        Environment:
        - Name: REGION
          Value: !Ref AWS::Region
        - Name: PORT
          Value: !Ref ApplicationPort
        - Name: ENGINE
          Value: Fargate
        PortMappings:
        - ContainerPort: !Ref ApplicationPort
      Cpu: '256'
      Memory: '0.5GB'
      Family: web-pipeline
      NetworkMode: awsvpc
      RequiresCompatibilities: 
      - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn

  ECSCluster:
    Type: AWS::ECS::Cluster
  
  AppService:
    Type: AWS::ECS::Service
    DependsOn:
    - LoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref TaskSize
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: web
        ContainerPort: !Ref ApplicationPort
        TargetGroupArn: !Ref DefaultTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration: 
          Subnets:
          - !Ref PrivateSubnetAZ1
          - !Ref PrivateSubnetAZ2
          SecurityGroups:
          - !Ref ALBtoTaskSecurityGroup
      TaskDefinition: !Ref TaskDefinition

Outputs:
  ApplicationEndpoint:
    Description: Application endpoint 
    Value: 
      Fn::Join:
      - '/'
      - - http:/
        - !GetAtt ApplicationLoadBalancer.DNSName 
  ClusterName:
    Description: Name of the created ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ecs-cluster'
  ServiceName:
    Description: The name of the service
    Value: !GetAtt AppService.Name
    Export:
      Name: !Sub '${AWS::StackName}-service'